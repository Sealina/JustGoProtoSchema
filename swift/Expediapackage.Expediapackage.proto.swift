// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file expediapackage.proto

import Foundation
import ProtocolBuffers


internal struct Expediapackage { }

internal func == (lhs: Expediapackage.Package, rhs: Expediapackage.Package) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasCityName == rhs.hasCityName) && (!lhs.hasCityName || lhs.cityName == rhs.cityName)
  fieldCheck = fieldCheck && (lhs.hasCountryName == rhs.hasCountryName) && (!lhs.hasCountryName || lhs.countryName == rhs.countryName)
  fieldCheck = fieldCheck && (lhs.hasFromDate == rhs.hasFromDate) && (!lhs.hasFromDate || lhs.fromDate == rhs.fromDate)
  fieldCheck = fieldCheck && (lhs.hasToDate == rhs.hasToDate) && (!lhs.hasToDate || lhs.toDate == rhs.toDate)
  fieldCheck = fieldCheck && (lhs.hasPricePerPerson == rhs.hasPricePerPerson) && (!lhs.hasPricePerPerson || lhs.pricePerPerson == rhs.pricePerPerson)
  fieldCheck = fieldCheck && (lhs.hasHotelId == rhs.hasHotelId) && (!lhs.hasHotelId || lhs.hotelId == rhs.hotelId)
  fieldCheck = fieldCheck && (lhs.hasHotelName == rhs.hasHotelName) && (!lhs.hasHotelName || lhs.hotelName == rhs.hotelName)
  fieldCheck = fieldCheck && (lhs.hasHotelAddress == rhs.hasHotelAddress) && (!lhs.hasHotelAddress || lhs.hotelAddress == rhs.hotelAddress)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = fieldCheck && (lhs.hasRating == rhs.hasRating) && (!lhs.hasRating || lhs.rating == rhs.rating)
  fieldCheck = fieldCheck && (lhs.hasReviewCount == rhs.hasReviewCount) && (!lhs.hasReviewCount || lhs.reviewCount == rhs.reviewCount)
  fieldCheck = fieldCheck && (lhs.hasFlightdetails == rhs.hasFlightdetails) && (!lhs.hasFlightdetails || lhs.flightdetails == rhs.flightdetails)
  fieldCheck = fieldCheck && (lhs.hasPackageImageUrl == rhs.hasPackageImageUrl) && (!lhs.hasPackageImageUrl || lhs.packageImageUrl == rhs.packageImageUrl)
  fieldCheck = fieldCheck && (lhs.cityImageUrls == rhs.cityImageUrls)
  fieldCheck = fieldCheck && (lhs.hotelImageUrls == rhs.hotelImageUrls)
  fieldCheck = fieldCheck && (lhs.hasBookingUrl == rhs.hasBookingUrl) && (!lhs.hasBookingUrl || lhs.bookingUrl == rhs.bookingUrl)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: Expediapackage.Flight, rhs: Expediapackage.Flight) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOriginFlightLeg == rhs.hasOriginFlightLeg) && (!lhs.hasOriginFlightLeg || lhs.originFlightLeg == rhs.originFlightLeg)
  fieldCheck = fieldCheck && (lhs.hasReturnFlightLeg == rhs.hasReturnFlightLeg) && (!lhs.hasReturnFlightLeg || lhs.returnFlightLeg == rhs.returnFlightLeg)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: Expediapackage.FlightLeg, rhs: Expediapackage.FlightLeg) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasDepartureAirport == rhs.hasDepartureAirport) && (!lhs.hasDepartureAirport || lhs.departureAirport == rhs.departureAirport)
  fieldCheck = fieldCheck && (lhs.hasDepartureAirportCode == rhs.hasDepartureAirportCode) && (!lhs.hasDepartureAirportCode || lhs.departureAirportCode == rhs.departureAirportCode)
  fieldCheck = fieldCheck && (lhs.hasDepartureAirportCity == rhs.hasDepartureAirportCity) && (!lhs.hasDepartureAirportCity || lhs.departureAirportCity == rhs.departureAirportCity)
  fieldCheck = fieldCheck && (lhs.hasArrivalAirport == rhs.hasArrivalAirport) && (!lhs.hasArrivalAirport || lhs.arrivalAirport == rhs.arrivalAirport)
  fieldCheck = fieldCheck && (lhs.hasArrivalAirportCode == rhs.hasArrivalAirportCode) && (!lhs.hasArrivalAirportCode || lhs.arrivalAirportCode == rhs.arrivalAirportCode)
  fieldCheck = fieldCheck && (lhs.hasArrivalAirportCity == rhs.hasArrivalAirportCity) && (!lhs.hasArrivalAirportCity || lhs.arrivalAirportCity == rhs.arrivalAirportCity)
  fieldCheck = fieldCheck && (lhs.hasDepartureTime == rhs.hasDepartureTime) && (!lhs.hasDepartureTime || lhs.departureTime == rhs.departureTime)
  fieldCheck = fieldCheck && (lhs.hasArrivalTime == rhs.hasArrivalTime) && (!lhs.hasArrivalTime || lhs.arrivalTime == rhs.arrivalTime)
  fieldCheck = fieldCheck && (lhs.hasFlightCarrier == rhs.hasFlightCarrier) && (!lhs.hasFlightCarrier || lhs.flightCarrier == rhs.flightCarrier)
  fieldCheck = fieldCheck && (lhs.hasFlightCarrierCode == rhs.hasFlightCarrierCode) && (!lhs.hasFlightCarrierCode || lhs.flightCarrierCode == rhs.flightCarrierCode)
  fieldCheck = fieldCheck && (lhs.hasFlightLegDuration == rhs.hasFlightLegDuration) && (!lhs.hasFlightLegDuration || lhs.flightLegDuration == rhs.flightLegDuration)
  fieldCheck = fieldCheck && (lhs.transitFlights == rhs.transitFlights)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: Expediapackage.TransitFlight, rhs: Expediapackage.TransitFlight) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTransitAirport == rhs.hasTransitAirport) && (!lhs.hasTransitAirport || lhs.transitAirport == rhs.transitAirport)
  fieldCheck = fieldCheck && (lhs.hasTransitAirportCode == rhs.hasTransitAirportCode) && (!lhs.hasTransitAirportCode || lhs.transitAirportCode == rhs.transitAirportCode)
  fieldCheck = fieldCheck && (lhs.hasTransitAirportCity == rhs.hasTransitAirportCity) && (!lhs.hasTransitAirportCity || lhs.transitAirportCity == rhs.transitAirportCity)
  fieldCheck = fieldCheck && (lhs.hasDepartureTime == rhs.hasDepartureTime) && (!lhs.hasDepartureTime || lhs.departureTime == rhs.departureTime)
  fieldCheck = fieldCheck && (lhs.hasArrivalTime == rhs.hasArrivalTime) && (!lhs.hasArrivalTime || lhs.arrivalTime == rhs.arrivalTime)
  fieldCheck = fieldCheck && (lhs.hasTransitFlightDuration == rhs.hasTransitFlightDuration) && (!lhs.hasTransitFlightDuration || lhs.transitFlightDuration == rhs.transitFlightDuration)
  fieldCheck = fieldCheck && (lhs.hasTransitAirportDuration == rhs.hasTransitAirportDuration) && (!lhs.hasTransitAirportDuration || lhs.transitAirportDuration == rhs.transitAirportDuration)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal extension Expediapackage {
  internal struct ExpediapackageRoot {
    internal static var sharedInstance : ExpediapackageRoot {
     struct Static {
         static let instance : ExpediapackageRoot = ExpediapackageRoot()
     }
     return Static.instance
    }
    internal var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    internal func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final internal class Package : GeneratedMessage, GeneratedMessageProtocol {
    // where
    private(set) var hasCityName:Bool = false
    private(set) var cityName:String = ""

    private(set) var hasCountryName:Bool = false
    private(set) var countryName:String = ""

    // when
    private(set) var hasFromDate:Bool = false
    private(set) var fromDate:String = ""

    // same format
    private(set) var hasToDate:Bool = false
    private(set) var toDate:String = ""

    // how much
    private(set) var hasPricePerPerson:Bool = false
    private(set) var pricePerPerson:Double = Double(0)

    // hotel details
    private(set) var hasHotelId:Bool = false
    private(set) var hotelId:String = ""

    private(set) var hasHotelName:Bool = false
    private(set) var hotelName:String = ""

    private(set) var hasHotelAddress:Bool = false
    private(set) var hotelAddress:String = ""

    private(set) var hasLatitude:Bool = false
    private(set) var latitude:Double = Double(0)

    private(set) var hasLongitude:Bool = false
    private(set) var longitude:Double = Double(0)

    private(set) var hasRating:Bool = false
    private(set) var rating:String = ""

    private(set) var hasReviewCount:Bool = false
    private(set) var reviewCount:UInt32 = UInt32(0)

    private(set) var hasFlightdetails:Bool = false
    private(set) var flightdetails:Expediapackage.Flight!
    // images
    // packageImageURL: "http://media.expedia.com/mobiata/mobile/apps/ExpediaBooking/FlightDestinations/images/[AirportCode].jpg?output-quality=60&output-format=jpeg&downsize=2208px%3A%2A"
    private(set) var hasPackageImageUrl:Bool = false
    private(set) var packageImageUrl:String = ""

    // not set now, might be hand picked in the future
    private(set) var cityImageUrls:Array<String> = Array<String>()
    private(set) var hotelImageUrls:Array<String> = Array<String>()
    private(set) var hasBookingUrl:Bool = false
    private(set) var bookingUrl:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasCityName {
        try output.writeString(1, value:cityName)
      }
      if hasCountryName {
        try output.writeString(2, value:countryName)
      }
      if hasFromDate {
        try output.writeString(3, value:fromDate)
      }
      if hasToDate {
        try output.writeString(4, value:toDate)
      }
      if hasPricePerPerson {
        try output.writeDouble(5, value:pricePerPerson)
      }
      if hasHotelId {
        try output.writeString(6, value:hotelId)
      }
      if hasHotelName {
        try output.writeString(7, value:hotelName)
      }
      if hasHotelAddress {
        try output.writeString(8, value:hotelAddress)
      }
      if hasLatitude {
        try output.writeDouble(9, value:latitude)
      }
      if hasLongitude {
        try output.writeDouble(10, value:longitude)
      }
      if hasRating {
        try output.writeString(11, value:rating)
      }
      if hasReviewCount {
        try output.writeUInt32(12, value:reviewCount)
      }
      if hasFlightdetails {
        try output.writeMessage(13, value:flightdetails)
      }
      if hasPackageImageUrl {
        try output.writeString(14, value:packageImageUrl)
      }
      if !cityImageUrls.isEmpty {
        for oneValuecityImageUrls in cityImageUrls {
          try output.writeString(15, value:oneValuecityImageUrls)
        }
      }
      if !hotelImageUrls.isEmpty {
        for oneValuehotelImageUrls in hotelImageUrls {
          try output.writeString(16, value:oneValuehotelImageUrls)
        }
      }
      if hasBookingUrl {
        try output.writeString(17, value:bookingUrl)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasCityName {
        serialize_size += cityName.computeStringSize(1)
      }
      if hasCountryName {
        serialize_size += countryName.computeStringSize(2)
      }
      if hasFromDate {
        serialize_size += fromDate.computeStringSize(3)
      }
      if hasToDate {
        serialize_size += toDate.computeStringSize(4)
      }
      if hasPricePerPerson {
        serialize_size += pricePerPerson.computeDoubleSize(5)
      }
      if hasHotelId {
        serialize_size += hotelId.computeStringSize(6)
      }
      if hasHotelName {
        serialize_size += hotelName.computeStringSize(7)
      }
      if hasHotelAddress {
        serialize_size += hotelAddress.computeStringSize(8)
      }
      if hasLatitude {
        serialize_size += latitude.computeDoubleSize(9)
      }
      if hasLongitude {
        serialize_size += longitude.computeDoubleSize(10)
      }
      if hasRating {
        serialize_size += rating.computeStringSize(11)
      }
      if hasReviewCount {
        serialize_size += reviewCount.computeUInt32Size(12)
      }
      if hasFlightdetails {
          if let varSizeflightdetails = flightdetails?.computeMessageSize(13) {
              serialize_size += varSizeflightdetails
          }
      }
      if hasPackageImageUrl {
        serialize_size += packageImageUrl.computeStringSize(14)
      }
      var dataSizeCityImageUrls:Int32 = 0
      for oneValuecityImageUrls in cityImageUrls {
          dataSizeCityImageUrls += oneValuecityImageUrls.computeStringSizeNoTag()
      }
      serialize_size += dataSizeCityImageUrls
      serialize_size += 1 * Int32(cityImageUrls.count)
      var dataSizeHotelImageUrls:Int32 = 0
      for oneValuehotelImageUrls in hotelImageUrls {
          dataSizeHotelImageUrls += oneValuehotelImageUrls.computeStringSizeNoTag()
      }
      serialize_size += dataSizeHotelImageUrls
      serialize_size += 2 * Int32(hotelImageUrls.count)
      if hasBookingUrl {
        serialize_size += bookingUrl.computeStringSize(17)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Expediapackage.Package> {
      var mergedArray = Array<Expediapackage.Package>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Expediapackage.Package? {
      return try Expediapackage.Package.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    internal class func parseFromData(data:NSData) throws -> Expediapackage.Package {
      return try Expediapackage.Package.Builder().mergeFromData(data, extensionRegistry:Expediapackage.ExpediapackageRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Expediapackage.Package {
      return try Expediapackage.Package.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) throws -> Expediapackage.Package {
      return try Expediapackage.Package.Builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Expediapackage.Package {
      return try Expediapackage.Package.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Expediapackage.Package {
      return try Expediapackage.Package.Builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Expediapackage.Package {
      return try Expediapackage.Package.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func getBuilder() -> Expediapackage.Package.Builder {
      return Expediapackage.Package.classBuilder() as! Expediapackage.Package.Builder
    }
    internal func getBuilder() -> Expediapackage.Package.Builder {
      return classBuilder() as! Expediapackage.Package.Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Expediapackage.Package.Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Expediapackage.Package.Builder()
    }
    internal func toBuilder() throws -> Expediapackage.Package.Builder {
      return try Expediapackage.Package.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Expediapackage.Package) throws -> Expediapackage.Package.Builder {
      return try Expediapackage.Package.Builder().mergeFrom(prototype)
    }
    override internal func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasCityName {
        output += "\(indent) cityName: \(cityName) \n"
      }
      if hasCountryName {
        output += "\(indent) countryName: \(countryName) \n"
      }
      if hasFromDate {
        output += "\(indent) fromDate: \(fromDate) \n"
      }
      if hasToDate {
        output += "\(indent) toDate: \(toDate) \n"
      }
      if hasPricePerPerson {
        output += "\(indent) pricePerPerson: \(pricePerPerson) \n"
      }
      if hasHotelId {
        output += "\(indent) hotelId: \(hotelId) \n"
      }
      if hasHotelName {
        output += "\(indent) hotelName: \(hotelName) \n"
      }
      if hasHotelAddress {
        output += "\(indent) hotelAddress: \(hotelAddress) \n"
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      if hasRating {
        output += "\(indent) rating: \(rating) \n"
      }
      if hasReviewCount {
        output += "\(indent) reviewCount: \(reviewCount) \n"
      }
      if hasFlightdetails {
        output += "\(indent) flightdetails {\n"
        if let outDescFlightdetails = flightdetails {
          output += try outDescFlightdetails.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasPackageImageUrl {
        output += "\(indent) packageImageUrl: \(packageImageUrl) \n"
      }
      var cityImageUrlsElementIndex:Int = 0
      for oneValuecityImageUrls in cityImageUrls  {
          output += "\(indent) cityImageUrls[\(cityImageUrlsElementIndex)]: \(oneValuecityImageUrls)\n"
          cityImageUrlsElementIndex++
      }
      var hotelImageUrlsElementIndex:Int = 0
      for oneValuehotelImageUrls in hotelImageUrls  {
          output += "\(indent) hotelImageUrls[\(hotelImageUrlsElementIndex)]: \(oneValuehotelImageUrls)\n"
          hotelImageUrlsElementIndex++
      }
      if hasBookingUrl {
        output += "\(indent) bookingUrl: \(bookingUrl) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasCityName {
               hashCode = (hashCode &* 31) &+ cityName.hashValue
            }
            if hasCountryName {
               hashCode = (hashCode &* 31) &+ countryName.hashValue
            }
            if hasFromDate {
               hashCode = (hashCode &* 31) &+ fromDate.hashValue
            }
            if hasToDate {
               hashCode = (hashCode &* 31) &+ toDate.hashValue
            }
            if hasPricePerPerson {
               hashCode = (hashCode &* 31) &+ pricePerPerson.hashValue
            }
            if hasHotelId {
               hashCode = (hashCode &* 31) &+ hotelId.hashValue
            }
            if hasHotelName {
               hashCode = (hashCode &* 31) &+ hotelName.hashValue
            }
            if hasHotelAddress {
               hashCode = (hashCode &* 31) &+ hotelAddress.hashValue
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            if hasRating {
               hashCode = (hashCode &* 31) &+ rating.hashValue
            }
            if hasReviewCount {
               hashCode = (hashCode &* 31) &+ reviewCount.hashValue
            }
            if hasFlightdetails {
                if let hashValueflightdetails = flightdetails?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueflightdetails
                }
            }
            if hasPackageImageUrl {
               hashCode = (hashCode &* 31) &+ packageImageUrl.hashValue
            }
            for oneValuecityImageUrls in cityImageUrls {
                hashCode = (hashCode &* 31) &+ oneValuecityImageUrls.hashValue
            }
            for oneValuehotelImageUrls in hotelImageUrls {
                hashCode = (hashCode &* 31) &+ oneValuehotelImageUrls.hashValue
            }
            if hasBookingUrl {
               hashCode = (hashCode &* 31) &+ bookingUrl.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Expediapackage.Package"
    }
    override internal func className() -> String {
        return "Expediapackage.Package"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Expediapackage.Package.self
    }
    //Meta information declaration end

    final internal class Builder : GeneratedMessageBuilder {
      private var builderResult:Expediapackage.Package = Expediapackage.Package()
      internal func getMessage() -> Expediapackage.Package {
          return builderResult
      }

      required override internal init () {
         super.init()
      }
      var hasCityName:Bool {
           get {
                return builderResult.hasCityName
           }
      }
      var cityName:String {
           get {
                return builderResult.cityName
           }
           set (value) {
               builderResult.hasCityName = true
               builderResult.cityName = value
           }
      }
      func setCityName(value:String) -> Expediapackage.Package.Builder {
        self.cityName = value
        return self
      }
      internal func clearCityName() -> Expediapackage.Package.Builder{
           builderResult.hasCityName = false
           builderResult.cityName = ""
           return self
      }
      var hasCountryName:Bool {
           get {
                return builderResult.hasCountryName
           }
      }
      var countryName:String {
           get {
                return builderResult.countryName
           }
           set (value) {
               builderResult.hasCountryName = true
               builderResult.countryName = value
           }
      }
      func setCountryName(value:String) -> Expediapackage.Package.Builder {
        self.countryName = value
        return self
      }
      internal func clearCountryName() -> Expediapackage.Package.Builder{
           builderResult.hasCountryName = false
           builderResult.countryName = ""
           return self
      }
      var hasFromDate:Bool {
           get {
                return builderResult.hasFromDate
           }
      }
      var fromDate:String {
           get {
                return builderResult.fromDate
           }
           set (value) {
               builderResult.hasFromDate = true
               builderResult.fromDate = value
           }
      }
      func setFromDate(value:String) -> Expediapackage.Package.Builder {
        self.fromDate = value
        return self
      }
      internal func clearFromDate() -> Expediapackage.Package.Builder{
           builderResult.hasFromDate = false
           builderResult.fromDate = ""
           return self
      }
      var hasToDate:Bool {
           get {
                return builderResult.hasToDate
           }
      }
      var toDate:String {
           get {
                return builderResult.toDate
           }
           set (value) {
               builderResult.hasToDate = true
               builderResult.toDate = value
           }
      }
      func setToDate(value:String) -> Expediapackage.Package.Builder {
        self.toDate = value
        return self
      }
      internal func clearToDate() -> Expediapackage.Package.Builder{
           builderResult.hasToDate = false
           builderResult.toDate = ""
           return self
      }
      var hasPricePerPerson:Bool {
           get {
                return builderResult.hasPricePerPerson
           }
      }
      var pricePerPerson:Double {
           get {
                return builderResult.pricePerPerson
           }
           set (value) {
               builderResult.hasPricePerPerson = true
               builderResult.pricePerPerson = value
           }
      }
      func setPricePerPerson(value:Double) -> Expediapackage.Package.Builder {
        self.pricePerPerson = value
        return self
      }
      internal func clearPricePerPerson() -> Expediapackage.Package.Builder{
           builderResult.hasPricePerPerson = false
           builderResult.pricePerPerson = Double(0)
           return self
      }
      var hasHotelId:Bool {
           get {
                return builderResult.hasHotelId
           }
      }
      var hotelId:String {
           get {
                return builderResult.hotelId
           }
           set (value) {
               builderResult.hasHotelId = true
               builderResult.hotelId = value
           }
      }
      func setHotelId(value:String) -> Expediapackage.Package.Builder {
        self.hotelId = value
        return self
      }
      internal func clearHotelId() -> Expediapackage.Package.Builder{
           builderResult.hasHotelId = false
           builderResult.hotelId = ""
           return self
      }
      var hasHotelName:Bool {
           get {
                return builderResult.hasHotelName
           }
      }
      var hotelName:String {
           get {
                return builderResult.hotelName
           }
           set (value) {
               builderResult.hasHotelName = true
               builderResult.hotelName = value
           }
      }
      func setHotelName(value:String) -> Expediapackage.Package.Builder {
        self.hotelName = value
        return self
      }
      internal func clearHotelName() -> Expediapackage.Package.Builder{
           builderResult.hasHotelName = false
           builderResult.hotelName = ""
           return self
      }
      var hasHotelAddress:Bool {
           get {
                return builderResult.hasHotelAddress
           }
      }
      var hotelAddress:String {
           get {
                return builderResult.hotelAddress
           }
           set (value) {
               builderResult.hasHotelAddress = true
               builderResult.hotelAddress = value
           }
      }
      func setHotelAddress(value:String) -> Expediapackage.Package.Builder {
        self.hotelAddress = value
        return self
      }
      internal func clearHotelAddress() -> Expediapackage.Package.Builder{
           builderResult.hasHotelAddress = false
           builderResult.hotelAddress = ""
           return self
      }
      var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      var latitude:Double {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      func setLatitude(value:Double) -> Expediapackage.Package.Builder {
        self.latitude = value
        return self
      }
      internal func clearLatitude() -> Expediapackage.Package.Builder{
           builderResult.hasLatitude = false
           builderResult.latitude = Double(0)
           return self
      }
      var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      var longitude:Double {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      func setLongitude(value:Double) -> Expediapackage.Package.Builder {
        self.longitude = value
        return self
      }
      internal func clearLongitude() -> Expediapackage.Package.Builder{
           builderResult.hasLongitude = false
           builderResult.longitude = Double(0)
           return self
      }
      var hasRating:Bool {
           get {
                return builderResult.hasRating
           }
      }
      var rating:String {
           get {
                return builderResult.rating
           }
           set (value) {
               builderResult.hasRating = true
               builderResult.rating = value
           }
      }
      func setRating(value:String) -> Expediapackage.Package.Builder {
        self.rating = value
        return self
      }
      internal func clearRating() -> Expediapackage.Package.Builder{
           builderResult.hasRating = false
           builderResult.rating = ""
           return self
      }
      var hasReviewCount:Bool {
           get {
                return builderResult.hasReviewCount
           }
      }
      var reviewCount:UInt32 {
           get {
                return builderResult.reviewCount
           }
           set (value) {
               builderResult.hasReviewCount = true
               builderResult.reviewCount = value
           }
      }
      func setReviewCount(value:UInt32) -> Expediapackage.Package.Builder {
        self.reviewCount = value
        return self
      }
      internal func clearReviewCount() -> Expediapackage.Package.Builder{
           builderResult.hasReviewCount = false
           builderResult.reviewCount = UInt32(0)
           return self
      }
      var hasFlightdetails:Bool {
           get {
               return builderResult.hasFlightdetails
           }
      }
      var flightdetails:Expediapackage.Flight! {
           get {
               if flightdetailsBuilder_ != nil {
                  builderResult.flightdetails = flightdetailsBuilder_.getMessage()
               }
               return builderResult.flightdetails
           }
           set (value) {
               builderResult.hasFlightdetails = true
               builderResult.flightdetails = value
           }
      }
      private var flightdetailsBuilder_:Expediapackage.Flight.Builder! {
           didSet {
              builderResult.hasFlightdetails = true
           }
      }
      internal func getFlightdetailsBuilder() -> Expediapackage.Flight.Builder {
        if flightdetailsBuilder_ == nil {
           flightdetailsBuilder_ = Expediapackage.Flight.Builder()
           builderResult.flightdetails = flightdetailsBuilder_.getMessage()
           if flightdetails != nil {
              try! flightdetailsBuilder_.mergeFrom(flightdetails)
           }
        }
        return flightdetailsBuilder_
      }
      func setFlightdetails(value:Expediapackage.Flight!) -> Expediapackage.Package.Builder {
        self.flightdetails = value
        return self
      }
      internal func mergeFlightdetails(value:Expediapackage.Flight) throws -> Expediapackage.Package.Builder {
        if builderResult.hasFlightdetails {
          builderResult.flightdetails = try Expediapackage.Flight.builderWithPrototype(builderResult.flightdetails).mergeFrom(value).buildPartial()
        } else {
          builderResult.flightdetails = value
        }
        builderResult.hasFlightdetails = true
        return self
      }
      internal func clearFlightdetails() -> Expediapackage.Package.Builder {
        flightdetailsBuilder_ = nil
        builderResult.hasFlightdetails = false
        builderResult.flightdetails = nil
        return self
      }
      var hasPackageImageUrl:Bool {
           get {
                return builderResult.hasPackageImageUrl
           }
      }
      var packageImageUrl:String {
           get {
                return builderResult.packageImageUrl
           }
           set (value) {
               builderResult.hasPackageImageUrl = true
               builderResult.packageImageUrl = value
           }
      }
      func setPackageImageUrl(value:String) -> Expediapackage.Package.Builder {
        self.packageImageUrl = value
        return self
      }
      internal func clearPackageImageUrl() -> Expediapackage.Package.Builder{
           builderResult.hasPackageImageUrl = false
           builderResult.packageImageUrl = ""
           return self
      }
      var cityImageUrls:Array<String> {
           get {
               return builderResult.cityImageUrls
           }
           set (array) {
               builderResult.cityImageUrls = array
           }
      }
      func setCityImageUrls(value:Array<String>) -> Expediapackage.Package.Builder {
        self.cityImageUrls = value
        return self
      }
      internal func clearCityImageUrls() -> Expediapackage.Package.Builder {
         builderResult.cityImageUrls.removeAll(keepCapacity: false)
         return self
      }
      var hotelImageUrls:Array<String> {
           get {
               return builderResult.hotelImageUrls
           }
           set (array) {
               builderResult.hotelImageUrls = array
           }
      }
      func setHotelImageUrls(value:Array<String>) -> Expediapackage.Package.Builder {
        self.hotelImageUrls = value
        return self
      }
      internal func clearHotelImageUrls() -> Expediapackage.Package.Builder {
         builderResult.hotelImageUrls.removeAll(keepCapacity: false)
         return self
      }
      var hasBookingUrl:Bool {
           get {
                return builderResult.hasBookingUrl
           }
      }
      var bookingUrl:String {
           get {
                return builderResult.bookingUrl
           }
           set (value) {
               builderResult.hasBookingUrl = true
               builderResult.bookingUrl = value
           }
      }
      func setBookingUrl(value:String) -> Expediapackage.Package.Builder {
        self.bookingUrl = value
        return self
      }
      internal func clearBookingUrl() -> Expediapackage.Package.Builder{
           builderResult.hasBookingUrl = false
           builderResult.bookingUrl = ""
           return self
      }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> Expediapackage.Package.Builder {
        builderResult = Expediapackage.Package()
        return self
      }
      internal override func clone() throws -> Expediapackage.Package.Builder {
        return try Expediapackage.Package.builderWithPrototype(builderResult)
      }
      internal override func build() throws -> Expediapackage.Package {
           try checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> Expediapackage.Package {
        let returnMe:Expediapackage.Package = builderResult
        return returnMe
      }
      internal func mergeFrom(other:Expediapackage.Package) throws -> Expediapackage.Package.Builder {
        if other == Expediapackage.Package() {
         return self
        }
        if other.hasCityName {
             cityName = other.cityName
        }
        if other.hasCountryName {
             countryName = other.countryName
        }
        if other.hasFromDate {
             fromDate = other.fromDate
        }
        if other.hasToDate {
             toDate = other.toDate
        }
        if other.hasPricePerPerson {
             pricePerPerson = other.pricePerPerson
        }
        if other.hasHotelId {
             hotelId = other.hotelId
        }
        if other.hasHotelName {
             hotelName = other.hotelName
        }
        if other.hasHotelAddress {
             hotelAddress = other.hotelAddress
        }
        if other.hasLatitude {
             latitude = other.latitude
        }
        if other.hasLongitude {
             longitude = other.longitude
        }
        if other.hasRating {
             rating = other.rating
        }
        if other.hasReviewCount {
             reviewCount = other.reviewCount
        }
        if (other.hasFlightdetails) {
            try mergeFlightdetails(other.flightdetails)
        }
        if other.hasPackageImageUrl {
             packageImageUrl = other.packageImageUrl
        }
        if !other.cityImageUrls.isEmpty {
            builderResult.cityImageUrls += other.cityImageUrls
        }
        if !other.hotelImageUrls.isEmpty {
            builderResult.hotelImageUrls += other.hotelImageUrls
        }
        if other.hasBookingUrl {
             bookingUrl = other.bookingUrl
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Expediapackage.Package.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Expediapackage.Package.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            cityName = try input.readString()

          case 18 :
            countryName = try input.readString()

          case 26 :
            fromDate = try input.readString()

          case 34 :
            toDate = try input.readString()

          case 41 :
            pricePerPerson = try input.readDouble()

          case 50 :
            hotelId = try input.readString()

          case 58 :
            hotelName = try input.readString()

          case 66 :
            hotelAddress = try input.readString()

          case 73 :
            latitude = try input.readDouble()

          case 81 :
            longitude = try input.readDouble()

          case 90 :
            rating = try input.readString()

          case 96 :
            reviewCount = try input.readUInt32()

          case 106 :
            let subBuilder:Expediapackage.Flight.Builder = Expediapackage.Flight.Builder()
            if hasFlightdetails {
              try subBuilder.mergeFrom(flightdetails)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            flightdetails = subBuilder.buildPartial()

          case 114 :
            packageImageUrl = try input.readString()

          case 122 :
            cityImageUrls += [try input.readString()]

          case 130 :
            hotelImageUrls += [try input.readString()]

          case 138 :
            bookingUrl = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final internal class Flight : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasOriginFlightLeg:Bool = false
    private(set) var originFlightLeg:Expediapackage.FlightLeg!
    private(set) var hasReturnFlightLeg:Bool = false
    private(set) var returnFlightLeg:Expediapackage.FlightLeg!
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasOriginFlightLeg {
        try output.writeMessage(1, value:originFlightLeg)
      }
      if hasReturnFlightLeg {
        try output.writeMessage(2, value:returnFlightLeg)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasOriginFlightLeg {
          if let varSizeoriginFlightLeg = originFlightLeg?.computeMessageSize(1) {
              serialize_size += varSizeoriginFlightLeg
          }
      }
      if hasReturnFlightLeg {
          if let varSizereturnFlightLeg = returnFlightLeg?.computeMessageSize(2) {
              serialize_size += varSizereturnFlightLeg
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Expediapackage.Flight> {
      var mergedArray = Array<Expediapackage.Flight>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Expediapackage.Flight? {
      return try Expediapackage.Flight.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    internal class func parseFromData(data:NSData) throws -> Expediapackage.Flight {
      return try Expediapackage.Flight.Builder().mergeFromData(data, extensionRegistry:Expediapackage.ExpediapackageRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Expediapackage.Flight {
      return try Expediapackage.Flight.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) throws -> Expediapackage.Flight {
      return try Expediapackage.Flight.Builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Expediapackage.Flight {
      return try Expediapackage.Flight.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Expediapackage.Flight {
      return try Expediapackage.Flight.Builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Expediapackage.Flight {
      return try Expediapackage.Flight.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func getBuilder() -> Expediapackage.Flight.Builder {
      return Expediapackage.Flight.classBuilder() as! Expediapackage.Flight.Builder
    }
    internal func getBuilder() -> Expediapackage.Flight.Builder {
      return classBuilder() as! Expediapackage.Flight.Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Expediapackage.Flight.Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Expediapackage.Flight.Builder()
    }
    internal func toBuilder() throws -> Expediapackage.Flight.Builder {
      return try Expediapackage.Flight.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Expediapackage.Flight) throws -> Expediapackage.Flight.Builder {
      return try Expediapackage.Flight.Builder().mergeFrom(prototype)
    }
    override internal func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasOriginFlightLeg {
        output += "\(indent) originFlightLeg {\n"
        if let outDescOriginFlightLeg = originFlightLeg {
          output += try outDescOriginFlightLeg.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasReturnFlightLeg {
        output += "\(indent) returnFlightLeg {\n"
        if let outDescReturnFlightLeg = returnFlightLeg {
          output += try outDescReturnFlightLeg.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasOriginFlightLeg {
                if let hashValueoriginFlightLeg = originFlightLeg?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoriginFlightLeg
                }
            }
            if hasReturnFlightLeg {
                if let hashValuereturnFlightLeg = returnFlightLeg?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuereturnFlightLeg
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Expediapackage.Flight"
    }
    override internal func className() -> String {
        return "Expediapackage.Flight"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Expediapackage.Flight.self
    }
    //Meta information declaration end

    final internal class Builder : GeneratedMessageBuilder {
      private var builderResult:Expediapackage.Flight = Expediapackage.Flight()
      internal func getMessage() -> Expediapackage.Flight {
          return builderResult
      }

      required override internal init () {
         super.init()
      }
      var hasOriginFlightLeg:Bool {
           get {
               return builderResult.hasOriginFlightLeg
           }
      }
      var originFlightLeg:Expediapackage.FlightLeg! {
           get {
               if originFlightLegBuilder_ != nil {
                  builderResult.originFlightLeg = originFlightLegBuilder_.getMessage()
               }
               return builderResult.originFlightLeg
           }
           set (value) {
               builderResult.hasOriginFlightLeg = true
               builderResult.originFlightLeg = value
           }
      }
      private var originFlightLegBuilder_:Expediapackage.FlightLeg.Builder! {
           didSet {
              builderResult.hasOriginFlightLeg = true
           }
      }
      internal func getOriginFlightLegBuilder() -> Expediapackage.FlightLeg.Builder {
        if originFlightLegBuilder_ == nil {
           originFlightLegBuilder_ = Expediapackage.FlightLeg.Builder()
           builderResult.originFlightLeg = originFlightLegBuilder_.getMessage()
           if originFlightLeg != nil {
              try! originFlightLegBuilder_.mergeFrom(originFlightLeg)
           }
        }
        return originFlightLegBuilder_
      }
      func setOriginFlightLeg(value:Expediapackage.FlightLeg!) -> Expediapackage.Flight.Builder {
        self.originFlightLeg = value
        return self
      }
      internal func mergeOriginFlightLeg(value:Expediapackage.FlightLeg) throws -> Expediapackage.Flight.Builder {
        if builderResult.hasOriginFlightLeg {
          builderResult.originFlightLeg = try Expediapackage.FlightLeg.builderWithPrototype(builderResult.originFlightLeg).mergeFrom(value).buildPartial()
        } else {
          builderResult.originFlightLeg = value
        }
        builderResult.hasOriginFlightLeg = true
        return self
      }
      internal func clearOriginFlightLeg() -> Expediapackage.Flight.Builder {
        originFlightLegBuilder_ = nil
        builderResult.hasOriginFlightLeg = false
        builderResult.originFlightLeg = nil
        return self
      }
      var hasReturnFlightLeg:Bool {
           get {
               return builderResult.hasReturnFlightLeg
           }
      }
      var returnFlightLeg:Expediapackage.FlightLeg! {
           get {
               if returnFlightLegBuilder_ != nil {
                  builderResult.returnFlightLeg = returnFlightLegBuilder_.getMessage()
               }
               return builderResult.returnFlightLeg
           }
           set (value) {
               builderResult.hasReturnFlightLeg = true
               builderResult.returnFlightLeg = value
           }
      }
      private var returnFlightLegBuilder_:Expediapackage.FlightLeg.Builder! {
           didSet {
              builderResult.hasReturnFlightLeg = true
           }
      }
      internal func getReturnFlightLegBuilder() -> Expediapackage.FlightLeg.Builder {
        if returnFlightLegBuilder_ == nil {
           returnFlightLegBuilder_ = Expediapackage.FlightLeg.Builder()
           builderResult.returnFlightLeg = returnFlightLegBuilder_.getMessage()
           if returnFlightLeg != nil {
              try! returnFlightLegBuilder_.mergeFrom(returnFlightLeg)
           }
        }
        return returnFlightLegBuilder_
      }
      func setReturnFlightLeg(value:Expediapackage.FlightLeg!) -> Expediapackage.Flight.Builder {
        self.returnFlightLeg = value
        return self
      }
      internal func mergeReturnFlightLeg(value:Expediapackage.FlightLeg) throws -> Expediapackage.Flight.Builder {
        if builderResult.hasReturnFlightLeg {
          builderResult.returnFlightLeg = try Expediapackage.FlightLeg.builderWithPrototype(builderResult.returnFlightLeg).mergeFrom(value).buildPartial()
        } else {
          builderResult.returnFlightLeg = value
        }
        builderResult.hasReturnFlightLeg = true
        return self
      }
      internal func clearReturnFlightLeg() -> Expediapackage.Flight.Builder {
        returnFlightLegBuilder_ = nil
        builderResult.hasReturnFlightLeg = false
        builderResult.returnFlightLeg = nil
        return self
      }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> Expediapackage.Flight.Builder {
        builderResult = Expediapackage.Flight()
        return self
      }
      internal override func clone() throws -> Expediapackage.Flight.Builder {
        return try Expediapackage.Flight.builderWithPrototype(builderResult)
      }
      internal override func build() throws -> Expediapackage.Flight {
           try checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> Expediapackage.Flight {
        let returnMe:Expediapackage.Flight = builderResult
        return returnMe
      }
      internal func mergeFrom(other:Expediapackage.Flight) throws -> Expediapackage.Flight.Builder {
        if other == Expediapackage.Flight() {
         return self
        }
        if (other.hasOriginFlightLeg) {
            try mergeOriginFlightLeg(other.originFlightLeg)
        }
        if (other.hasReturnFlightLeg) {
            try mergeReturnFlightLeg(other.returnFlightLeg)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Expediapackage.Flight.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Expediapackage.Flight.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:Expediapackage.FlightLeg.Builder = Expediapackage.FlightLeg.Builder()
            if hasOriginFlightLeg {
              try subBuilder.mergeFrom(originFlightLeg)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            originFlightLeg = subBuilder.buildPartial()

          case 18 :
            let subBuilder:Expediapackage.FlightLeg.Builder = Expediapackage.FlightLeg.Builder()
            if hasReturnFlightLeg {
              try subBuilder.mergeFrom(returnFlightLeg)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            returnFlightLeg = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final internal class FlightLeg : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasDepartureAirport:Bool = false
    private(set) var departureAirport:String = ""

    private(set) var hasDepartureAirportCode:Bool = false
    private(set) var departureAirportCode:String = ""

    private(set) var hasDepartureAirportCity:Bool = false
    private(set) var departureAirportCity:String = ""

    private(set) var hasArrivalAirport:Bool = false
    private(set) var arrivalAirport:String = ""

    private(set) var hasArrivalAirportCode:Bool = false
    private(set) var arrivalAirportCode:String = ""

    private(set) var hasArrivalAirportCity:Bool = false
    private(set) var arrivalAirportCity:String = ""

    // ISO standard: YYYY-MM-DDTHH:mm:SS.sss$Time Zone) e.g. 2016-12-15T09:30:00.000-06:00
    private(set) var hasDepartureTime:Bool = false
    private(set) var departureTime:String = ""

    // Same format
    private(set) var hasArrivalTime:Bool = false
    private(set) var arrivalTime:String = ""

    // e.g. American Airline
    private(set) var hasFlightCarrier:Bool = false
    private(set) var flightCarrier:String = ""

    // e.g. AA
    private(set) var hasFlightCarrierCode:Bool = false
    private(set) var flightCarrierCode:String = ""

    // HH-mm e.g. self.arrivalTime - self.departureTime
    private(set) var hasFlightLegDuration:Bool = false
    private(set) var flightLegDuration:String = ""

    private(set) var transitFlights:Array<Expediapackage.TransitFlight>  = Array<Expediapackage.TransitFlight>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasDepartureAirport {
        try output.writeString(1, value:departureAirport)
      }
      if hasDepartureAirportCode {
        try output.writeString(2, value:departureAirportCode)
      }
      if hasDepartureAirportCity {
        try output.writeString(3, value:departureAirportCity)
      }
      if hasArrivalAirport {
        try output.writeString(4, value:arrivalAirport)
      }
      if hasArrivalAirportCode {
        try output.writeString(5, value:arrivalAirportCode)
      }
      if hasArrivalAirportCity {
        try output.writeString(6, value:arrivalAirportCity)
      }
      if hasDepartureTime {
        try output.writeString(7, value:departureTime)
      }
      if hasArrivalTime {
        try output.writeString(8, value:arrivalTime)
      }
      if hasFlightCarrier {
        try output.writeString(9, value:flightCarrier)
      }
      if hasFlightCarrierCode {
        try output.writeString(10, value:flightCarrierCode)
      }
      if hasFlightLegDuration {
        try output.writeString(11, value:flightLegDuration)
      }
      for oneElementtransitFlights in transitFlights {
          try output.writeMessage(12, value:oneElementtransitFlights)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasDepartureAirport {
        serialize_size += departureAirport.computeStringSize(1)
      }
      if hasDepartureAirportCode {
        serialize_size += departureAirportCode.computeStringSize(2)
      }
      if hasDepartureAirportCity {
        serialize_size += departureAirportCity.computeStringSize(3)
      }
      if hasArrivalAirport {
        serialize_size += arrivalAirport.computeStringSize(4)
      }
      if hasArrivalAirportCode {
        serialize_size += arrivalAirportCode.computeStringSize(5)
      }
      if hasArrivalAirportCity {
        serialize_size += arrivalAirportCity.computeStringSize(6)
      }
      if hasDepartureTime {
        serialize_size += departureTime.computeStringSize(7)
      }
      if hasArrivalTime {
        serialize_size += arrivalTime.computeStringSize(8)
      }
      if hasFlightCarrier {
        serialize_size += flightCarrier.computeStringSize(9)
      }
      if hasFlightCarrierCode {
        serialize_size += flightCarrierCode.computeStringSize(10)
      }
      if hasFlightLegDuration {
        serialize_size += flightLegDuration.computeStringSize(11)
      }
      for oneElementtransitFlights in transitFlights {
          serialize_size += oneElementtransitFlights.computeMessageSize(12)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Expediapackage.FlightLeg> {
      var mergedArray = Array<Expediapackage.FlightLeg>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Expediapackage.FlightLeg? {
      return try Expediapackage.FlightLeg.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    internal class func parseFromData(data:NSData) throws -> Expediapackage.FlightLeg {
      return try Expediapackage.FlightLeg.Builder().mergeFromData(data, extensionRegistry:Expediapackage.ExpediapackageRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Expediapackage.FlightLeg {
      return try Expediapackage.FlightLeg.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) throws -> Expediapackage.FlightLeg {
      return try Expediapackage.FlightLeg.Builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Expediapackage.FlightLeg {
      return try Expediapackage.FlightLeg.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Expediapackage.FlightLeg {
      return try Expediapackage.FlightLeg.Builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Expediapackage.FlightLeg {
      return try Expediapackage.FlightLeg.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func getBuilder() -> Expediapackage.FlightLeg.Builder {
      return Expediapackage.FlightLeg.classBuilder() as! Expediapackage.FlightLeg.Builder
    }
    internal func getBuilder() -> Expediapackage.FlightLeg.Builder {
      return classBuilder() as! Expediapackage.FlightLeg.Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Expediapackage.FlightLeg.Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Expediapackage.FlightLeg.Builder()
    }
    internal func toBuilder() throws -> Expediapackage.FlightLeg.Builder {
      return try Expediapackage.FlightLeg.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Expediapackage.FlightLeg) throws -> Expediapackage.FlightLeg.Builder {
      return try Expediapackage.FlightLeg.Builder().mergeFrom(prototype)
    }
    override internal func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasDepartureAirport {
        output += "\(indent) departureAirport: \(departureAirport) \n"
      }
      if hasDepartureAirportCode {
        output += "\(indent) departureAirportCode: \(departureAirportCode) \n"
      }
      if hasDepartureAirportCity {
        output += "\(indent) departureAirportCity: \(departureAirportCity) \n"
      }
      if hasArrivalAirport {
        output += "\(indent) arrivalAirport: \(arrivalAirport) \n"
      }
      if hasArrivalAirportCode {
        output += "\(indent) arrivalAirportCode: \(arrivalAirportCode) \n"
      }
      if hasArrivalAirportCity {
        output += "\(indent) arrivalAirportCity: \(arrivalAirportCity) \n"
      }
      if hasDepartureTime {
        output += "\(indent) departureTime: \(departureTime) \n"
      }
      if hasArrivalTime {
        output += "\(indent) arrivalTime: \(arrivalTime) \n"
      }
      if hasFlightCarrier {
        output += "\(indent) flightCarrier: \(flightCarrier) \n"
      }
      if hasFlightCarrierCode {
        output += "\(indent) flightCarrierCode: \(flightCarrierCode) \n"
      }
      if hasFlightLegDuration {
        output += "\(indent) flightLegDuration: \(flightLegDuration) \n"
      }
      var transitFlightsElementIndex:Int = 0
      for oneElementtransitFlights in transitFlights {
          output += "\(indent) transitFlights[\(transitFlightsElementIndex)] {\n"
          output += try oneElementtransitFlights.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          transitFlightsElementIndex++
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasDepartureAirport {
               hashCode = (hashCode &* 31) &+ departureAirport.hashValue
            }
            if hasDepartureAirportCode {
               hashCode = (hashCode &* 31) &+ departureAirportCode.hashValue
            }
            if hasDepartureAirportCity {
               hashCode = (hashCode &* 31) &+ departureAirportCity.hashValue
            }
            if hasArrivalAirport {
               hashCode = (hashCode &* 31) &+ arrivalAirport.hashValue
            }
            if hasArrivalAirportCode {
               hashCode = (hashCode &* 31) &+ arrivalAirportCode.hashValue
            }
            if hasArrivalAirportCity {
               hashCode = (hashCode &* 31) &+ arrivalAirportCity.hashValue
            }
            if hasDepartureTime {
               hashCode = (hashCode &* 31) &+ departureTime.hashValue
            }
            if hasArrivalTime {
               hashCode = (hashCode &* 31) &+ arrivalTime.hashValue
            }
            if hasFlightCarrier {
               hashCode = (hashCode &* 31) &+ flightCarrier.hashValue
            }
            if hasFlightCarrierCode {
               hashCode = (hashCode &* 31) &+ flightCarrierCode.hashValue
            }
            if hasFlightLegDuration {
               hashCode = (hashCode &* 31) &+ flightLegDuration.hashValue
            }
            for oneElementtransitFlights in transitFlights {
                hashCode = (hashCode &* 31) &+ oneElementtransitFlights.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Expediapackage.FlightLeg"
    }
    override internal func className() -> String {
        return "Expediapackage.FlightLeg"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Expediapackage.FlightLeg.self
    }
    //Meta information declaration end

    final internal class Builder : GeneratedMessageBuilder {
      private var builderResult:Expediapackage.FlightLeg = Expediapackage.FlightLeg()
      internal func getMessage() -> Expediapackage.FlightLeg {
          return builderResult
      }

      required override internal init () {
         super.init()
      }
      var hasDepartureAirport:Bool {
           get {
                return builderResult.hasDepartureAirport
           }
      }
      var departureAirport:String {
           get {
                return builderResult.departureAirport
           }
           set (value) {
               builderResult.hasDepartureAirport = true
               builderResult.departureAirport = value
           }
      }
      func setDepartureAirport(value:String) -> Expediapackage.FlightLeg.Builder {
        self.departureAirport = value
        return self
      }
      internal func clearDepartureAirport() -> Expediapackage.FlightLeg.Builder{
           builderResult.hasDepartureAirport = false
           builderResult.departureAirport = ""
           return self
      }
      var hasDepartureAirportCode:Bool {
           get {
                return builderResult.hasDepartureAirportCode
           }
      }
      var departureAirportCode:String {
           get {
                return builderResult.departureAirportCode
           }
           set (value) {
               builderResult.hasDepartureAirportCode = true
               builderResult.departureAirportCode = value
           }
      }
      func setDepartureAirportCode(value:String) -> Expediapackage.FlightLeg.Builder {
        self.departureAirportCode = value
        return self
      }
      internal func clearDepartureAirportCode() -> Expediapackage.FlightLeg.Builder{
           builderResult.hasDepartureAirportCode = false
           builderResult.departureAirportCode = ""
           return self
      }
      var hasDepartureAirportCity:Bool {
           get {
                return builderResult.hasDepartureAirportCity
           }
      }
      var departureAirportCity:String {
           get {
                return builderResult.departureAirportCity
           }
           set (value) {
               builderResult.hasDepartureAirportCity = true
               builderResult.departureAirportCity = value
           }
      }
      func setDepartureAirportCity(value:String) -> Expediapackage.FlightLeg.Builder {
        self.departureAirportCity = value
        return self
      }
      internal func clearDepartureAirportCity() -> Expediapackage.FlightLeg.Builder{
           builderResult.hasDepartureAirportCity = false
           builderResult.departureAirportCity = ""
           return self
      }
      var hasArrivalAirport:Bool {
           get {
                return builderResult.hasArrivalAirport
           }
      }
      var arrivalAirport:String {
           get {
                return builderResult.arrivalAirport
           }
           set (value) {
               builderResult.hasArrivalAirport = true
               builderResult.arrivalAirport = value
           }
      }
      func setArrivalAirport(value:String) -> Expediapackage.FlightLeg.Builder {
        self.arrivalAirport = value
        return self
      }
      internal func clearArrivalAirport() -> Expediapackage.FlightLeg.Builder{
           builderResult.hasArrivalAirport = false
           builderResult.arrivalAirport = ""
           return self
      }
      var hasArrivalAirportCode:Bool {
           get {
                return builderResult.hasArrivalAirportCode
           }
      }
      var arrivalAirportCode:String {
           get {
                return builderResult.arrivalAirportCode
           }
           set (value) {
               builderResult.hasArrivalAirportCode = true
               builderResult.arrivalAirportCode = value
           }
      }
      func setArrivalAirportCode(value:String) -> Expediapackage.FlightLeg.Builder {
        self.arrivalAirportCode = value
        return self
      }
      internal func clearArrivalAirportCode() -> Expediapackage.FlightLeg.Builder{
           builderResult.hasArrivalAirportCode = false
           builderResult.arrivalAirportCode = ""
           return self
      }
      var hasArrivalAirportCity:Bool {
           get {
                return builderResult.hasArrivalAirportCity
           }
      }
      var arrivalAirportCity:String {
           get {
                return builderResult.arrivalAirportCity
           }
           set (value) {
               builderResult.hasArrivalAirportCity = true
               builderResult.arrivalAirportCity = value
           }
      }
      func setArrivalAirportCity(value:String) -> Expediapackage.FlightLeg.Builder {
        self.arrivalAirportCity = value
        return self
      }
      internal func clearArrivalAirportCity() -> Expediapackage.FlightLeg.Builder{
           builderResult.hasArrivalAirportCity = false
           builderResult.arrivalAirportCity = ""
           return self
      }
      var hasDepartureTime:Bool {
           get {
                return builderResult.hasDepartureTime
           }
      }
      var departureTime:String {
           get {
                return builderResult.departureTime
           }
           set (value) {
               builderResult.hasDepartureTime = true
               builderResult.departureTime = value
           }
      }
      func setDepartureTime(value:String) -> Expediapackage.FlightLeg.Builder {
        self.departureTime = value
        return self
      }
      internal func clearDepartureTime() -> Expediapackage.FlightLeg.Builder{
           builderResult.hasDepartureTime = false
           builderResult.departureTime = ""
           return self
      }
      var hasArrivalTime:Bool {
           get {
                return builderResult.hasArrivalTime
           }
      }
      var arrivalTime:String {
           get {
                return builderResult.arrivalTime
           }
           set (value) {
               builderResult.hasArrivalTime = true
               builderResult.arrivalTime = value
           }
      }
      func setArrivalTime(value:String) -> Expediapackage.FlightLeg.Builder {
        self.arrivalTime = value
        return self
      }
      internal func clearArrivalTime() -> Expediapackage.FlightLeg.Builder{
           builderResult.hasArrivalTime = false
           builderResult.arrivalTime = ""
           return self
      }
      var hasFlightCarrier:Bool {
           get {
                return builderResult.hasFlightCarrier
           }
      }
      var flightCarrier:String {
           get {
                return builderResult.flightCarrier
           }
           set (value) {
               builderResult.hasFlightCarrier = true
               builderResult.flightCarrier = value
           }
      }
      func setFlightCarrier(value:String) -> Expediapackage.FlightLeg.Builder {
        self.flightCarrier = value
        return self
      }
      internal func clearFlightCarrier() -> Expediapackage.FlightLeg.Builder{
           builderResult.hasFlightCarrier = false
           builderResult.flightCarrier = ""
           return self
      }
      var hasFlightCarrierCode:Bool {
           get {
                return builderResult.hasFlightCarrierCode
           }
      }
      var flightCarrierCode:String {
           get {
                return builderResult.flightCarrierCode
           }
           set (value) {
               builderResult.hasFlightCarrierCode = true
               builderResult.flightCarrierCode = value
           }
      }
      func setFlightCarrierCode(value:String) -> Expediapackage.FlightLeg.Builder {
        self.flightCarrierCode = value
        return self
      }
      internal func clearFlightCarrierCode() -> Expediapackage.FlightLeg.Builder{
           builderResult.hasFlightCarrierCode = false
           builderResult.flightCarrierCode = ""
           return self
      }
      var hasFlightLegDuration:Bool {
           get {
                return builderResult.hasFlightLegDuration
           }
      }
      var flightLegDuration:String {
           get {
                return builderResult.flightLegDuration
           }
           set (value) {
               builderResult.hasFlightLegDuration = true
               builderResult.flightLegDuration = value
           }
      }
      func setFlightLegDuration(value:String) -> Expediapackage.FlightLeg.Builder {
        self.flightLegDuration = value
        return self
      }
      internal func clearFlightLegDuration() -> Expediapackage.FlightLeg.Builder{
           builderResult.hasFlightLegDuration = false
           builderResult.flightLegDuration = ""
           return self
      }
      var transitFlights:Array<Expediapackage.TransitFlight> {
           get {
               return builderResult.transitFlights
           }
           set (value) {
               builderResult.transitFlights = value
           }
      }
      func setTransitFlights(value:Array<Expediapackage.TransitFlight>) -> Expediapackage.FlightLeg.Builder {
        self.transitFlights = value
        return self
      }
      internal func clearTransitFlights() -> Expediapackage.FlightLeg.Builder {
        builderResult.transitFlights.removeAll(keepCapacity: false)
        return self
      }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> Expediapackage.FlightLeg.Builder {
        builderResult = Expediapackage.FlightLeg()
        return self
      }
      internal override func clone() throws -> Expediapackage.FlightLeg.Builder {
        return try Expediapackage.FlightLeg.builderWithPrototype(builderResult)
      }
      internal override func build() throws -> Expediapackage.FlightLeg {
           try checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> Expediapackage.FlightLeg {
        let returnMe:Expediapackage.FlightLeg = builderResult
        return returnMe
      }
      internal func mergeFrom(other:Expediapackage.FlightLeg) throws -> Expediapackage.FlightLeg.Builder {
        if other == Expediapackage.FlightLeg() {
         return self
        }
        if other.hasDepartureAirport {
             departureAirport = other.departureAirport
        }
        if other.hasDepartureAirportCode {
             departureAirportCode = other.departureAirportCode
        }
        if other.hasDepartureAirportCity {
             departureAirportCity = other.departureAirportCity
        }
        if other.hasArrivalAirport {
             arrivalAirport = other.arrivalAirport
        }
        if other.hasArrivalAirportCode {
             arrivalAirportCode = other.arrivalAirportCode
        }
        if other.hasArrivalAirportCity {
             arrivalAirportCity = other.arrivalAirportCity
        }
        if other.hasDepartureTime {
             departureTime = other.departureTime
        }
        if other.hasArrivalTime {
             arrivalTime = other.arrivalTime
        }
        if other.hasFlightCarrier {
             flightCarrier = other.flightCarrier
        }
        if other.hasFlightCarrierCode {
             flightCarrierCode = other.flightCarrierCode
        }
        if other.hasFlightLegDuration {
             flightLegDuration = other.flightLegDuration
        }
        if !other.transitFlights.isEmpty  {
           builderResult.transitFlights += other.transitFlights
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Expediapackage.FlightLeg.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Expediapackage.FlightLeg.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            departureAirport = try input.readString()

          case 18 :
            departureAirportCode = try input.readString()

          case 26 :
            departureAirportCity = try input.readString()

          case 34 :
            arrivalAirport = try input.readString()

          case 42 :
            arrivalAirportCode = try input.readString()

          case 50 :
            arrivalAirportCity = try input.readString()

          case 58 :
            departureTime = try input.readString()

          case 66 :
            arrivalTime = try input.readString()

          case 74 :
            flightCarrier = try input.readString()

          case 82 :
            flightCarrierCode = try input.readString()

          case 90 :
            flightLegDuration = try input.readString()

          case 98 :
            let subBuilder = Expediapackage.TransitFlight.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            transitFlights += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final internal class TransitFlight : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasTransitAirport:Bool = false
    private(set) var transitAirport:String = ""

    private(set) var hasTransitAirportCode:Bool = false
    private(set) var transitAirportCode:String = ""

    private(set) var hasTransitAirportCity:Bool = false
    private(set) var transitAirportCity:String = ""

    private(set) var hasDepartureTime:Bool = false
    private(set) var departureTime:String = ""

    private(set) var hasArrivalTime:Bool = false
    private(set) var arrivalTime:String = ""

    // HH-mm e.g. self.arrivalTime - self.departureTime
    private(set) var hasTransitFlightDuration:Bool = false
    private(set) var transitFlightDuration:String = ""

    // HH-mm e.g. originFlightLeg.transitFlights[0].departureTime - previousFlightLeg.arrivalTime
    private(set) var hasTransitAirportDuration:Bool = false
    private(set) var transitAirportDuration:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasTransitAirport {
        try output.writeString(1, value:transitAirport)
      }
      if hasTransitAirportCode {
        try output.writeString(2, value:transitAirportCode)
      }
      if hasTransitAirportCity {
        try output.writeString(3, value:transitAirportCity)
      }
      if hasDepartureTime {
        try output.writeString(4, value:departureTime)
      }
      if hasArrivalTime {
        try output.writeString(5, value:arrivalTime)
      }
      if hasTransitFlightDuration {
        try output.writeString(6, value:transitFlightDuration)
      }
      if hasTransitAirportDuration {
        try output.writeString(7, value:transitAirportDuration)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasTransitAirport {
        serialize_size += transitAirport.computeStringSize(1)
      }
      if hasTransitAirportCode {
        serialize_size += transitAirportCode.computeStringSize(2)
      }
      if hasTransitAirportCity {
        serialize_size += transitAirportCity.computeStringSize(3)
      }
      if hasDepartureTime {
        serialize_size += departureTime.computeStringSize(4)
      }
      if hasArrivalTime {
        serialize_size += arrivalTime.computeStringSize(5)
      }
      if hasTransitFlightDuration {
        serialize_size += transitFlightDuration.computeStringSize(6)
      }
      if hasTransitAirportDuration {
        serialize_size += transitAirportDuration.computeStringSize(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Expediapackage.TransitFlight> {
      var mergedArray = Array<Expediapackage.TransitFlight>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Expediapackage.TransitFlight? {
      return try Expediapackage.TransitFlight.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    internal class func parseFromData(data:NSData) throws -> Expediapackage.TransitFlight {
      return try Expediapackage.TransitFlight.Builder().mergeFromData(data, extensionRegistry:Expediapackage.ExpediapackageRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Expediapackage.TransitFlight {
      return try Expediapackage.TransitFlight.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) throws -> Expediapackage.TransitFlight {
      return try Expediapackage.TransitFlight.Builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Expediapackage.TransitFlight {
      return try Expediapackage.TransitFlight.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Expediapackage.TransitFlight {
      return try Expediapackage.TransitFlight.Builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Expediapackage.TransitFlight {
      return try Expediapackage.TransitFlight.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func getBuilder() -> Expediapackage.TransitFlight.Builder {
      return Expediapackage.TransitFlight.classBuilder() as! Expediapackage.TransitFlight.Builder
    }
    internal func getBuilder() -> Expediapackage.TransitFlight.Builder {
      return classBuilder() as! Expediapackage.TransitFlight.Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Expediapackage.TransitFlight.Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Expediapackage.TransitFlight.Builder()
    }
    internal func toBuilder() throws -> Expediapackage.TransitFlight.Builder {
      return try Expediapackage.TransitFlight.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Expediapackage.TransitFlight) throws -> Expediapackage.TransitFlight.Builder {
      return try Expediapackage.TransitFlight.Builder().mergeFrom(prototype)
    }
    override internal func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasTransitAirport {
        output += "\(indent) transitAirport: \(transitAirport) \n"
      }
      if hasTransitAirportCode {
        output += "\(indent) transitAirportCode: \(transitAirportCode) \n"
      }
      if hasTransitAirportCity {
        output += "\(indent) transitAirportCity: \(transitAirportCity) \n"
      }
      if hasDepartureTime {
        output += "\(indent) departureTime: \(departureTime) \n"
      }
      if hasArrivalTime {
        output += "\(indent) arrivalTime: \(arrivalTime) \n"
      }
      if hasTransitFlightDuration {
        output += "\(indent) transitFlightDuration: \(transitFlightDuration) \n"
      }
      if hasTransitAirportDuration {
        output += "\(indent) transitAirportDuration: \(transitAirportDuration) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasTransitAirport {
               hashCode = (hashCode &* 31) &+ transitAirport.hashValue
            }
            if hasTransitAirportCode {
               hashCode = (hashCode &* 31) &+ transitAirportCode.hashValue
            }
            if hasTransitAirportCity {
               hashCode = (hashCode &* 31) &+ transitAirportCity.hashValue
            }
            if hasDepartureTime {
               hashCode = (hashCode &* 31) &+ departureTime.hashValue
            }
            if hasArrivalTime {
               hashCode = (hashCode &* 31) &+ arrivalTime.hashValue
            }
            if hasTransitFlightDuration {
               hashCode = (hashCode &* 31) &+ transitFlightDuration.hashValue
            }
            if hasTransitAirportDuration {
               hashCode = (hashCode &* 31) &+ transitAirportDuration.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Expediapackage.TransitFlight"
    }
    override internal func className() -> String {
        return "Expediapackage.TransitFlight"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Expediapackage.TransitFlight.self
    }
    //Meta information declaration end

    final internal class Builder : GeneratedMessageBuilder {
      private var builderResult:Expediapackage.TransitFlight = Expediapackage.TransitFlight()
      internal func getMessage() -> Expediapackage.TransitFlight {
          return builderResult
      }

      required override internal init () {
         super.init()
      }
      var hasTransitAirport:Bool {
           get {
                return builderResult.hasTransitAirport
           }
      }
      var transitAirport:String {
           get {
                return builderResult.transitAirport
           }
           set (value) {
               builderResult.hasTransitAirport = true
               builderResult.transitAirport = value
           }
      }
      func setTransitAirport(value:String) -> Expediapackage.TransitFlight.Builder {
        self.transitAirport = value
        return self
      }
      internal func clearTransitAirport() -> Expediapackage.TransitFlight.Builder{
           builderResult.hasTransitAirport = false
           builderResult.transitAirport = ""
           return self
      }
      var hasTransitAirportCode:Bool {
           get {
                return builderResult.hasTransitAirportCode
           }
      }
      var transitAirportCode:String {
           get {
                return builderResult.transitAirportCode
           }
           set (value) {
               builderResult.hasTransitAirportCode = true
               builderResult.transitAirportCode = value
           }
      }
      func setTransitAirportCode(value:String) -> Expediapackage.TransitFlight.Builder {
        self.transitAirportCode = value
        return self
      }
      internal func clearTransitAirportCode() -> Expediapackage.TransitFlight.Builder{
           builderResult.hasTransitAirportCode = false
           builderResult.transitAirportCode = ""
           return self
      }
      var hasTransitAirportCity:Bool {
           get {
                return builderResult.hasTransitAirportCity
           }
      }
      var transitAirportCity:String {
           get {
                return builderResult.transitAirportCity
           }
           set (value) {
               builderResult.hasTransitAirportCity = true
               builderResult.transitAirportCity = value
           }
      }
      func setTransitAirportCity(value:String) -> Expediapackage.TransitFlight.Builder {
        self.transitAirportCity = value
        return self
      }
      internal func clearTransitAirportCity() -> Expediapackage.TransitFlight.Builder{
           builderResult.hasTransitAirportCity = false
           builderResult.transitAirportCity = ""
           return self
      }
      var hasDepartureTime:Bool {
           get {
                return builderResult.hasDepartureTime
           }
      }
      var departureTime:String {
           get {
                return builderResult.departureTime
           }
           set (value) {
               builderResult.hasDepartureTime = true
               builderResult.departureTime = value
           }
      }
      func setDepartureTime(value:String) -> Expediapackage.TransitFlight.Builder {
        self.departureTime = value
        return self
      }
      internal func clearDepartureTime() -> Expediapackage.TransitFlight.Builder{
           builderResult.hasDepartureTime = false
           builderResult.departureTime = ""
           return self
      }
      var hasArrivalTime:Bool {
           get {
                return builderResult.hasArrivalTime
           }
      }
      var arrivalTime:String {
           get {
                return builderResult.arrivalTime
           }
           set (value) {
               builderResult.hasArrivalTime = true
               builderResult.arrivalTime = value
           }
      }
      func setArrivalTime(value:String) -> Expediapackage.TransitFlight.Builder {
        self.arrivalTime = value
        return self
      }
      internal func clearArrivalTime() -> Expediapackage.TransitFlight.Builder{
           builderResult.hasArrivalTime = false
           builderResult.arrivalTime = ""
           return self
      }
      var hasTransitFlightDuration:Bool {
           get {
                return builderResult.hasTransitFlightDuration
           }
      }
      var transitFlightDuration:String {
           get {
                return builderResult.transitFlightDuration
           }
           set (value) {
               builderResult.hasTransitFlightDuration = true
               builderResult.transitFlightDuration = value
           }
      }
      func setTransitFlightDuration(value:String) -> Expediapackage.TransitFlight.Builder {
        self.transitFlightDuration = value
        return self
      }
      internal func clearTransitFlightDuration() -> Expediapackage.TransitFlight.Builder{
           builderResult.hasTransitFlightDuration = false
           builderResult.transitFlightDuration = ""
           return self
      }
      var hasTransitAirportDuration:Bool {
           get {
                return builderResult.hasTransitAirportDuration
           }
      }
      var transitAirportDuration:String {
           get {
                return builderResult.transitAirportDuration
           }
           set (value) {
               builderResult.hasTransitAirportDuration = true
               builderResult.transitAirportDuration = value
           }
      }
      func setTransitAirportDuration(value:String) -> Expediapackage.TransitFlight.Builder {
        self.transitAirportDuration = value
        return self
      }
      internal func clearTransitAirportDuration() -> Expediapackage.TransitFlight.Builder{
           builderResult.hasTransitAirportDuration = false
           builderResult.transitAirportDuration = ""
           return self
      }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> Expediapackage.TransitFlight.Builder {
        builderResult = Expediapackage.TransitFlight()
        return self
      }
      internal override func clone() throws -> Expediapackage.TransitFlight.Builder {
        return try Expediapackage.TransitFlight.builderWithPrototype(builderResult)
      }
      internal override func build() throws -> Expediapackage.TransitFlight {
           try checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> Expediapackage.TransitFlight {
        let returnMe:Expediapackage.TransitFlight = builderResult
        return returnMe
      }
      internal func mergeFrom(other:Expediapackage.TransitFlight) throws -> Expediapackage.TransitFlight.Builder {
        if other == Expediapackage.TransitFlight() {
         return self
        }
        if other.hasTransitAirport {
             transitAirport = other.transitAirport
        }
        if other.hasTransitAirportCode {
             transitAirportCode = other.transitAirportCode
        }
        if other.hasTransitAirportCity {
             transitAirportCity = other.transitAirportCity
        }
        if other.hasDepartureTime {
             departureTime = other.departureTime
        }
        if other.hasArrivalTime {
             arrivalTime = other.arrivalTime
        }
        if other.hasTransitFlightDuration {
             transitFlightDuration = other.transitFlightDuration
        }
        if other.hasTransitAirportDuration {
             transitAirportDuration = other.transitAirportDuration
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Expediapackage.TransitFlight.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Expediapackage.TransitFlight.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            transitAirport = try input.readString()

          case 18 :
            transitAirportCode = try input.readString()

          case 26 :
            transitAirportCity = try input.readString()

          case 34 :
            departureTime = try input.readString()

          case 42 :
            arrivalTime = try input.readString()

          case 50 :
            transitFlightDuration = try input.readString()

          case 58 :
            transitAirportDuration = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
